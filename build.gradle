plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'nu.studer.jooq' version '8.2.3'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {


    implementation 'org.springframework.boot:spring-boot-starter-web'

    runtimeOnly 'com.mysql:mysql-connector-j'

    // Jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Jooq
    jooqGenerator 'com.mysql:mysql-connector-j'
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.19.1'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // lombook
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'


    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // OAuth + JWT
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // AWS S3
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //javafaker
    implementation 'net.datafaker:datafaker:2.2.2'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

}


jooq {
    version = '3.19.1'  // the default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false

            generationTool {
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        properties {
                            property {
                                key = 'scripts'
                                value = 'db/mysql/initdb.d/create_table.sql' // SQL 스크립트 파일 위치
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.chatcode.jooq'
                        directory = 'src/main/java/jooq/chatcode'  // default (can be omitted)
                    }
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}