/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long version;
    private final Long authorId;
    private final Boolean completed;
    private final Long contentId;
    private final String createIp;
    private final LocalDateTime dateCreated;
    private final Boolean enabled;
    private final Long lastEditorId;
    private final LocalDateTime lastUpdated;
    private final Integer noteCount;
    private final Integer scrapCount;
    private final Long selectedNoteId;
    private final String tagString;
    private final String title;
    private final Integer viewCount;
    private final Integer likeCount;
    private final Integer dislikeCount;
    private final Long categoryId;

    public Article(Article value) {
        this.id = value.id;
        this.version = value.version;
        this.authorId = value.authorId;
        this.completed = value.completed;
        this.contentId = value.contentId;
        this.createIp = value.createIp;
        this.dateCreated = value.dateCreated;
        this.enabled = value.enabled;
        this.lastEditorId = value.lastEditorId;
        this.lastUpdated = value.lastUpdated;
        this.noteCount = value.noteCount;
        this.scrapCount = value.scrapCount;
        this.selectedNoteId = value.selectedNoteId;
        this.tagString = value.tagString;
        this.title = value.title;
        this.viewCount = value.viewCount;
        this.likeCount = value.likeCount;
        this.dislikeCount = value.dislikeCount;
        this.categoryId = value.categoryId;
    }

    public Article(
        Long id,
        Long version,
        Long authorId,
        Boolean completed,
        Long contentId,
        String createIp,
        LocalDateTime dateCreated,
        Boolean enabled,
        Long lastEditorId,
        LocalDateTime lastUpdated,
        Integer noteCount,
        Integer scrapCount,
        Long selectedNoteId,
        String tagString,
        String title,
        Integer viewCount,
        Integer likeCount,
        Integer dislikeCount,
        Long categoryId
    ) {
        this.id = id;
        this.version = version;
        this.authorId = authorId;
        this.completed = completed;
        this.contentId = contentId;
        this.createIp = createIp;
        this.dateCreated = dateCreated;
        this.enabled = enabled;
        this.lastEditorId = lastEditorId;
        this.lastUpdated = lastUpdated;
        this.noteCount = noteCount;
        this.scrapCount = scrapCount;
        this.selectedNoteId = selectedNoteId;
        this.tagString = tagString;
        this.title = title;
        this.viewCount = viewCount;
        this.likeCount = likeCount;
        this.dislikeCount = dislikeCount;
        this.categoryId = categoryId;
    }

    /**
     * Getter for <code>article.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>article.version</code>.
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>article.author_id</code>.
     */
    public Long getAuthorId() {
        return this.authorId;
    }

    /**
     * Getter for <code>article.completed</code>.
     */
    public Boolean getCompleted() {
        return this.completed;
    }

    /**
     * Getter for <code>article.content_id</code>.
     */
    public Long getContentId() {
        return this.contentId;
    }

    /**
     * Getter for <code>article.create_ip</code>.
     */
    public String getCreateIp() {
        return this.createIp;
    }

    /**
     * Getter for <code>article.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Getter for <code>article.enabled</code>.
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Getter for <code>article.last_editor_id</code>.
     */
    public Long getLastEditorId() {
        return this.lastEditorId;
    }

    /**
     * Getter for <code>article.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Getter for <code>article.note_count</code>.
     */
    public Integer getNoteCount() {
        return this.noteCount;
    }

    /**
     * Getter for <code>article.scrap_count</code>.
     */
    public Integer getScrapCount() {
        return this.scrapCount;
    }

    /**
     * Getter for <code>article.selected_note_id</code>.
     */
    public Long getSelectedNoteId() {
        return this.selectedNoteId;
    }

    /**
     * Getter for <code>article.tag_string</code>.
     */
    public String getTagString() {
        return this.tagString;
    }

    /**
     * Getter for <code>article.title</code>.
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Getter for <code>article.view_count</code>.
     */
    public Integer getViewCount() {
        return this.viewCount;
    }

    /**
     * Getter for <code>article.like_count</code>.
     */
    public Integer getLikeCount() {
        return this.likeCount;
    }

    /**
     * Getter for <code>article.dislike_count</code>.
     */
    public Integer getDislikeCount() {
        return this.dislikeCount;
    }

    /**
     * Getter for <code>article.category_id</code>.
     */
    public Long getCategoryId() {
        return this.categoryId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Article other = (Article) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.authorId == null) {
            if (other.authorId != null)
                return false;
        }
        else if (!this.authorId.equals(other.authorId))
            return false;
        if (this.completed == null) {
            if (other.completed != null)
                return false;
        }
        else if (!this.completed.equals(other.completed))
            return false;
        if (this.contentId == null) {
            if (other.contentId != null)
                return false;
        }
        else if (!this.contentId.equals(other.contentId))
            return false;
        if (this.createIp == null) {
            if (other.createIp != null)
                return false;
        }
        else if (!this.createIp.equals(other.createIp))
            return false;
        if (this.dateCreated == null) {
            if (other.dateCreated != null)
                return false;
        }
        else if (!this.dateCreated.equals(other.dateCreated))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.lastEditorId == null) {
            if (other.lastEditorId != null)
                return false;
        }
        else if (!this.lastEditorId.equals(other.lastEditorId))
            return false;
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!this.lastUpdated.equals(other.lastUpdated))
            return false;
        if (this.noteCount == null) {
            if (other.noteCount != null)
                return false;
        }
        else if (!this.noteCount.equals(other.noteCount))
            return false;
        if (this.scrapCount == null) {
            if (other.scrapCount != null)
                return false;
        }
        else if (!this.scrapCount.equals(other.scrapCount))
            return false;
        if (this.selectedNoteId == null) {
            if (other.selectedNoteId != null)
                return false;
        }
        else if (!this.selectedNoteId.equals(other.selectedNoteId))
            return false;
        if (this.tagString == null) {
            if (other.tagString != null)
                return false;
        }
        else if (!this.tagString.equals(other.tagString))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.viewCount == null) {
            if (other.viewCount != null)
                return false;
        }
        else if (!this.viewCount.equals(other.viewCount))
            return false;
        if (this.likeCount == null) {
            if (other.likeCount != null)
                return false;
        }
        else if (!this.likeCount.equals(other.likeCount))
            return false;
        if (this.dislikeCount == null) {
            if (other.dislikeCount != null)
                return false;
        }
        else if (!this.dislikeCount.equals(other.dislikeCount))
            return false;
        if (this.categoryId == null) {
            if (other.categoryId != null)
                return false;
        }
        else if (!this.categoryId.equals(other.categoryId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.authorId == null) ? 0 : this.authorId.hashCode());
        result = prime * result + ((this.completed == null) ? 0 : this.completed.hashCode());
        result = prime * result + ((this.contentId == null) ? 0 : this.contentId.hashCode());
        result = prime * result + ((this.createIp == null) ? 0 : this.createIp.hashCode());
        result = prime * result + ((this.dateCreated == null) ? 0 : this.dateCreated.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.lastEditorId == null) ? 0 : this.lastEditorId.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.noteCount == null) ? 0 : this.noteCount.hashCode());
        result = prime * result + ((this.scrapCount == null) ? 0 : this.scrapCount.hashCode());
        result = prime * result + ((this.selectedNoteId == null) ? 0 : this.selectedNoteId.hashCode());
        result = prime * result + ((this.tagString == null) ? 0 : this.tagString.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.viewCount == null) ? 0 : this.viewCount.hashCode());
        result = prime * result + ((this.likeCount == null) ? 0 : this.likeCount.hashCode());
        result = prime * result + ((this.dislikeCount == null) ? 0 : this.dislikeCount.hashCode());
        result = prime * result + ((this.categoryId == null) ? 0 : this.categoryId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Article (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(authorId);
        sb.append(", ").append(completed);
        sb.append(", ").append(contentId);
        sb.append(", ").append(createIp);
        sb.append(", ").append(dateCreated);
        sb.append(", ").append(enabled);
        sb.append(", ").append(lastEditorId);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(noteCount);
        sb.append(", ").append(scrapCount);
        sb.append(", ").append(selectedNoteId);
        sb.append(", ").append(tagString);
        sb.append(", ").append(title);
        sb.append(", ").append(viewCount);
        sb.append(", ").append(likeCount);
        sb.append(", ").append(dislikeCount);
        sb.append(", ").append(categoryId);

        sb.append(")");
        return sb.toString();
    }
}
