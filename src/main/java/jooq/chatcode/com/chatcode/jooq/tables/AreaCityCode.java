/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.records.AreaCityCodeRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AreaCityCode extends TableImpl<AreaCityCodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>area_city_code</code>
     */
    public static final AreaCityCode AREA_CITY_CODE = new AreaCityCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AreaCityCodeRecord> getRecordType() {
        return AreaCityCodeRecord.class;
    }

    /**
     * The column <code>area_city_code.id</code>.
     */
    public final TableField<AreaCityCodeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>area_city_code.version</code>.
     */
    public final TableField<AreaCityCodeRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>area_city_code.name</code>.
     */
    public final TableField<AreaCityCodeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private AreaCityCode(Name alias, Table<AreaCityCodeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AreaCityCode(Name alias, Table<AreaCityCodeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>area_city_code</code> table reference
     */
    public AreaCityCode(String alias) {
        this(DSL.name(alias), AREA_CITY_CODE);
    }

    /**
     * Create an aliased <code>area_city_code</code> table reference
     */
    public AreaCityCode(Name alias) {
        this(alias, AREA_CITY_CODE);
    }

    /**
     * Create a <code>area_city_code</code> table reference
     */
    public AreaCityCode() {
        this(DSL.name("area_city_code"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AreaCityCodeRecord> getPrimaryKey() {
        return Keys.PK_AREA_CITY_CODE;
    }

    @Override
    public AreaCityCode as(String alias) {
        return new AreaCityCode(DSL.name(alias), this);
    }

    @Override
    public AreaCityCode as(Name alias) {
        return new AreaCityCode(alias, this);
    }

    @Override
    public AreaCityCode as(Table<?> alias) {
        return new AreaCityCode(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AreaCityCode rename(String name) {
        return new AreaCityCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AreaCityCode rename(Name name) {
        return new AreaCityCode(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AreaCityCode rename(Table<?> name) {
        return new AreaCityCode(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode where(Condition condition) {
        return new AreaCityCode(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AreaCityCode where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AreaCityCode where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AreaCityCode where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AreaCityCode where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AreaCityCode whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
