/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.records.CategoryOldRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryOld extends TableImpl<CategoryOldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>category_old</code>
     */
    public static final CategoryOld CATEGORY_OLD = new CategoryOld();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryOldRecord> getRecordType() {
        return CategoryOldRecord.class;
    }

    /**
     * The column <code>category_old.code</code>.
     */
    public final TableField<CategoryOldRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>category_old.version</code>.
     */
    public final TableField<CategoryOldRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>category_old.date_created</code>.
     */
    public final TableField<CategoryOldRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>category_old.default_label</code>.
     */
    public final TableField<CategoryOldRecord, String> DEFAULT_LABEL = createField(DSL.name("default_label"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>category_old.enabled</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.external_link</code>.
     */
    public final TableField<CategoryOldRecord, String> EXTERNAL_LINK = createField(DSL.name("external_link"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>category_old.icon_css_names</code>.
     */
    public final TableField<CategoryOldRecord, String> ICON_CSS_NAMES = createField(DSL.name("icon_css_names"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>category_old.isurl</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> ISURL = createField(DSL.name("isurl"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.label_code</code>.
     */
    public final TableField<CategoryOldRecord, String> LABEL_CODE = createField(DSL.name("label_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>category_old.last_updated</code>.
     */
    public final TableField<CategoryOldRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>category_old.level</code>.
     */
    public final TableField<CategoryOldRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>category_old.parent_id</code>.
     */
    public final TableField<CategoryOldRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>category_old.require_tag</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> REQUIRE_TAG = createField(DSL.name("require_tag"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.sort_order</code>.
     */
    public final TableField<CategoryOldRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>category_old.url</code>.
     */
    public final TableField<CategoryOldRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>category_old.use_evaluate</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> USE_EVALUATE = createField(DSL.name("use_evaluate"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.use_note</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> USE_NOTE = createField(DSL.name("use_note"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.use_opinion</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> USE_OPINION = createField(DSL.name("use_opinion"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.use_tag</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> USE_TAG = createField(DSL.name("use_tag"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.writable</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> WRITABLE = createField(DSL.name("writable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>category_old.write_by_external_link</code>.
     */
    public final TableField<CategoryOldRecord, Boolean> WRITE_BY_EXTERNAL_LINK = createField(DSL.name("write_by_external_link"), SQLDataType.BOOLEAN, this, "");

    private CategoryOld(Name alias, Table<CategoryOldRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CategoryOld(Name alias, Table<CategoryOldRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>category_old</code> table reference
     */
    public CategoryOld(String alias) {
        this(DSL.name(alias), CATEGORY_OLD);
    }

    /**
     * Create an aliased <code>category_old</code> table reference
     */
    public CategoryOld(Name alias) {
        this(alias, CATEGORY_OLD);
    }

    /**
     * Create a <code>category_old</code> table reference
     */
    public CategoryOld() {
        this(DSL.name("category_old"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CategoryOldRecord> getPrimaryKey() {
        return Keys.PK_CATEGORY_OLD;
    }

    @Override
    public CategoryOld as(String alias) {
        return new CategoryOld(DSL.name(alias), this);
    }

    @Override
    public CategoryOld as(Name alias) {
        return new CategoryOld(alias, this);
    }

    @Override
    public CategoryOld as(Table<?> alias) {
        return new CategoryOld(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryOld rename(String name) {
        return new CategoryOld(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryOld rename(Name name) {
        return new CategoryOld(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryOld rename(Table<?> name) {
        return new CategoryOld(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld where(Condition condition) {
        return new CategoryOld(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryOld where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryOld where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryOld where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryOld where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryOld whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
