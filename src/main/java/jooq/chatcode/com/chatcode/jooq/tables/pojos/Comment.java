/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long articleId;
    private final Long authorId;
    private final Long version;
    private final String comment;
    private final LocalDateTime dateCreated;
    private final LocalDateTime lastUpdated;
    private final Integer likeCount;
    private final Integer dislikeCount;
    private final Long parentId;
    private final Long ancestorId;
    private final Integer depth;

    public Comment(Comment value) {
        this.id = value.id;
        this.articleId = value.articleId;
        this.authorId = value.authorId;
        this.version = value.version;
        this.comment = value.comment;
        this.dateCreated = value.dateCreated;
        this.lastUpdated = value.lastUpdated;
        this.likeCount = value.likeCount;
        this.dislikeCount = value.dislikeCount;
        this.parentId = value.parentId;
        this.ancestorId = value.ancestorId;
        this.depth = value.depth;
    }

    public Comment(
        Long id,
        Long articleId,
        Long authorId,
        Long version,
        String comment,
        LocalDateTime dateCreated,
        LocalDateTime lastUpdated,
        Integer likeCount,
        Integer dislikeCount,
        Long parentId,
        Long ancestorId,
        Integer depth
    ) {
        this.id = id;
        this.articleId = articleId;
        this.authorId = authorId;
        this.version = version;
        this.comment = comment;
        this.dateCreated = dateCreated;
        this.lastUpdated = lastUpdated;
        this.likeCount = likeCount;
        this.dislikeCount = dislikeCount;
        this.parentId = parentId;
        this.ancestorId = ancestorId;
        this.depth = depth;
    }

    /**
     * Getter for <code>comment.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>comment.article_id</code>.
     */
    public Long getArticleId() {
        return this.articleId;
    }

    /**
     * Getter for <code>comment.author_id</code>.
     */
    public Long getAuthorId() {
        return this.authorId;
    }

    /**
     * Getter for <code>comment.version</code>.
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>comment.comment</code>.
     */
    public String getComment() {
        return this.comment;
    }

    /**
     * Getter for <code>comment.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Getter for <code>comment.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Getter for <code>comment.like_count</code>.
     */
    public Integer getLikeCount() {
        return this.likeCount;
    }

    /**
     * Getter for <code>comment.dislike_count</code>.
     */
    public Integer getDislikeCount() {
        return this.dislikeCount;
    }

    /**
     * Getter for <code>comment.parent_id</code>.
     */
    public Long getParentId() {
        return this.parentId;
    }

    /**
     * Getter for <code>comment.ancestor_id</code>.
     */
    public Long getAncestorId() {
        return this.ancestorId;
    }

    /**
     * Getter for <code>comment.depth</code>.
     */
    public Integer getDepth() {
        return this.depth;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Comment other = (Comment) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.articleId == null) {
            if (other.articleId != null)
                return false;
        }
        else if (!this.articleId.equals(other.articleId))
            return false;
        if (this.authorId == null) {
            if (other.authorId != null)
                return false;
        }
        else if (!this.authorId.equals(other.authorId))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.comment == null) {
            if (other.comment != null)
                return false;
        }
        else if (!this.comment.equals(other.comment))
            return false;
        if (this.dateCreated == null) {
            if (other.dateCreated != null)
                return false;
        }
        else if (!this.dateCreated.equals(other.dateCreated))
            return false;
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!this.lastUpdated.equals(other.lastUpdated))
            return false;
        if (this.likeCount == null) {
            if (other.likeCount != null)
                return false;
        }
        else if (!this.likeCount.equals(other.likeCount))
            return false;
        if (this.dislikeCount == null) {
            if (other.dislikeCount != null)
                return false;
        }
        else if (!this.dislikeCount.equals(other.dislikeCount))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        if (this.ancestorId == null) {
            if (other.ancestorId != null)
                return false;
        }
        else if (!this.ancestorId.equals(other.ancestorId))
            return false;
        if (this.depth == null) {
            if (other.depth != null)
                return false;
        }
        else if (!this.depth.equals(other.depth))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.articleId == null) ? 0 : this.articleId.hashCode());
        result = prime * result + ((this.authorId == null) ? 0 : this.authorId.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.comment == null) ? 0 : this.comment.hashCode());
        result = prime * result + ((this.dateCreated == null) ? 0 : this.dateCreated.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.likeCount == null) ? 0 : this.likeCount.hashCode());
        result = prime * result + ((this.dislikeCount == null) ? 0 : this.dislikeCount.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        result = prime * result + ((this.ancestorId == null) ? 0 : this.ancestorId.hashCode());
        result = prime * result + ((this.depth == null) ? 0 : this.depth.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Comment (");

        sb.append(id);
        sb.append(", ").append(articleId);
        sb.append(", ").append(authorId);
        sb.append(", ").append(version);
        sb.append(", ").append(comment);
        sb.append(", ").append(dateCreated);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(likeCount);
        sb.append(", ").append(dislikeCount);
        sb.append(", ").append(parentId);
        sb.append(", ").append(ancestorId);
        sb.append(", ").append(depth);

        sb.append(")");
        return sb.toString();
    }
}
