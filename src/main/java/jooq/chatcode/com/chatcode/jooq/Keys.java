/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq;


import com.chatcode.jooq.tables.Activity;
import com.chatcode.jooq.tables.AreaCityCode;
import com.chatcode.jooq.tables.AreaDistrictCode;
import com.chatcode.jooq.tables.Article;
import com.chatcode.jooq.tables.Avatar;
import com.chatcode.jooq.tables.AvatarInterestTag;
import com.chatcode.jooq.tables.Banner;
import com.chatcode.jooq.tables.BannerClick;
import com.chatcode.jooq.tables.Category;
import com.chatcode.jooq.tables.CategoryOld;
import com.chatcode.jooq.tables.ChangeLog;
import com.chatcode.jooq.tables.Comment;
import com.chatcode.jooq.tables.ConfirmEmail;
import com.chatcode.jooq.tables.Content;
import com.chatcode.jooq.tables.ContentVote;
import com.chatcode.jooq.tables.File;
import com.chatcode.jooq.tables.Follow;
import com.chatcode.jooq.tables.InterestTag;
import com.chatcode.jooq.tables.LoggedIn;
import com.chatcode.jooq.tables.Oauthid;
import com.chatcode.jooq.tables.Role;
import com.chatcode.jooq.tables.Scrap;
import com.chatcode.jooq.tables.SpamWord;
import com.chatcode.jooq.tables.Tag;
import com.chatcode.jooq.tables.TempArticle;
import com.chatcode.jooq.tables.User;
import com.chatcode.jooq.tables.UserRole;
import com.chatcode.jooq.tables._28optional_29notification;
import com.chatcode.jooq.tables._28optional_29notificationRead;
import com.chatcode.jooq.tables.records.ActivityRecord;
import com.chatcode.jooq.tables.records.AreaCityCodeRecord;
import com.chatcode.jooq.tables.records.AreaDistrictCodeRecord;
import com.chatcode.jooq.tables.records.ArticleRecord;
import com.chatcode.jooq.tables.records.AvatarInterestTagRecord;
import com.chatcode.jooq.tables.records.AvatarRecord;
import com.chatcode.jooq.tables.records.BannerClickRecord;
import com.chatcode.jooq.tables.records.BannerRecord;
import com.chatcode.jooq.tables.records.CategoryOldRecord;
import com.chatcode.jooq.tables.records.CategoryRecord;
import com.chatcode.jooq.tables.records.ChangeLogRecord;
import com.chatcode.jooq.tables.records.CommentRecord;
import com.chatcode.jooq.tables.records.ConfirmEmailRecord;
import com.chatcode.jooq.tables.records.ContentRecord;
import com.chatcode.jooq.tables.records.ContentVoteRecord;
import com.chatcode.jooq.tables.records.FileRecord;
import com.chatcode.jooq.tables.records.FollowRecord;
import com.chatcode.jooq.tables.records.InterestTagRecord;
import com.chatcode.jooq.tables.records.LoggedInRecord;
import com.chatcode.jooq.tables.records.OauthidRecord;
import com.chatcode.jooq.tables.records.RoleRecord;
import com.chatcode.jooq.tables.records.ScrapRecord;
import com.chatcode.jooq.tables.records.SpamWordRecord;
import com.chatcode.jooq.tables.records.TagRecord;
import com.chatcode.jooq.tables.records.TempArticleRecord;
import com.chatcode.jooq.tables.records.UserRecord;
import com.chatcode.jooq.tables.records.UserRoleRecord;
import com.chatcode.jooq.tables.records._28optional_29notificationReadRecord;
import com.chatcode.jooq.tables.records._28optional_29notificationRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<_28optional_29notificationRecord> PK__28OPTIONAL_29NOTIFICATION = Internal.createUniqueKey(_28optional_29notification._28OPTIONAL_29NOTIFICATION, DSL.name("PK_(OPTIONAL)NOTIFICATION"), new TableField[] { _28optional_29notification._28OPTIONAL_29NOTIFICATION.ID }, true);
    public static final UniqueKey<_28optional_29notificationReadRecord> PK__28OPTIONAL_29NOTIFICATION_READ = Internal.createUniqueKey(_28optional_29notificationRead._28OPTIONAL_29NOTIFICATION_READ, DSL.name("PK_(OPTIONAL)NOTIFICATION_READ"), new TableField[] { _28optional_29notificationRead._28OPTIONAL_29NOTIFICATION_READ.ID }, true);
    public static final UniqueKey<ActivityRecord> PK_ACTIVITY = Internal.createUniqueKey(Activity.ACTIVITY, DSL.name("PK_ACTIVITY"), new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final UniqueKey<AreaCityCodeRecord> PK_AREA_CITY_CODE = Internal.createUniqueKey(AreaCityCode.AREA_CITY_CODE, DSL.name("PK_AREA_CITY_CODE"), new TableField[] { AreaCityCode.AREA_CITY_CODE.ID }, true);
    public static final UniqueKey<AreaDistrictCodeRecord> PK_AREA_DISTRICT_CODE = Internal.createUniqueKey(AreaDistrictCode.AREA_DISTRICT_CODE, DSL.name("PK_AREA_DISTRICT_CODE"), new TableField[] { AreaDistrictCode.AREA_DISTRICT_CODE.ID }, true);
    public static final UniqueKey<ArticleRecord> PK_ARTICLE = Internal.createUniqueKey(Article.ARTICLE, DSL.name("PK_ARTICLE"), new TableField[] { Article.ARTICLE.ID }, true);
    public static final UniqueKey<AvatarRecord> PK_AVATAR = Internal.createUniqueKey(Avatar.AVATAR, DSL.name("PK_AVATAR"), new TableField[] { Avatar.AVATAR.ID }, true);
    public static final UniqueKey<AvatarInterestTagRecord> PK_AVATAR_INTEREST_TAG = Internal.createUniqueKey(AvatarInterestTag.AVATAR_INTEREST_TAG, DSL.name("PK_AVATAR_INTEREST_TAG"), new TableField[] { AvatarInterestTag.AVATAR_INTEREST_TAG.ID }, true);
    public static final UniqueKey<BannerRecord> PK_BANNER = Internal.createUniqueKey(Banner.BANNER, DSL.name("PK_BANNER"), new TableField[] { Banner.BANNER.ID }, true);
    public static final UniqueKey<BannerClickRecord> PK_BANNER_CLICK = Internal.createUniqueKey(BannerClick.BANNER_CLICK, DSL.name("PK_BANNER_CLICK"), new TableField[] { BannerClick.BANNER_CLICK.ID }, true);
    public static final UniqueKey<CategoryRecord> PK_CATEGORY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("PK_CATEGORY"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CategoryOldRecord> PK_CATEGORY_OLD = Internal.createUniqueKey(CategoryOld.CATEGORY_OLD, DSL.name("PK_CATEGORY_OLD"), new TableField[] { CategoryOld.CATEGORY_OLD.CODE }, true);
    public static final UniqueKey<ChangeLogRecord> PK_CHANGE_LOG = Internal.createUniqueKey(ChangeLog.CHANGE_LOG, DSL.name("PK_CHANGE_LOG"), new TableField[] { ChangeLog.CHANGE_LOG.ID }, true);
    public static final UniqueKey<CommentRecord> PK_COMMENTID = Internal.createUniqueKey(Comment.COMMENT, DSL.name("PK_COMMENTID"), new TableField[] { Comment.COMMENT.ID }, true);
    public static final UniqueKey<ConfirmEmailRecord> PK_CONFIRM_EMAIL = Internal.createUniqueKey(ConfirmEmail.CONFIRM_EMAIL, DSL.name("PK_CONFIRM_EMAIL"), new TableField[] { ConfirmEmail.CONFIRM_EMAIL.ID }, true);
    public static final UniqueKey<ContentRecord> PK_CONTENT = Internal.createUniqueKey(Content.CONTENT, DSL.name("PK_CONTENT"), new TableField[] { Content.CONTENT.ID }, true);
    public static final UniqueKey<ContentVoteRecord> PK_CONTENT_VOTE = Internal.createUniqueKey(ContentVote.CONTENT_VOTE, DSL.name("PK_CONTENT_VOTE"), new TableField[] { ContentVote.CONTENT_VOTE.ID }, true);
    public static final UniqueKey<FileRecord> PK_FILE = Internal.createUniqueKey(File.FILE, DSL.name("PK_FILE"), new TableField[] { File.FILE.ID }, true);
    public static final UniqueKey<FollowRecord> PK_FOLLOW = Internal.createUniqueKey(Follow.FOLLOW, DSL.name("PK_FOLLOW"), new TableField[] { Follow.FOLLOW.FOLLOWER_ID, Follow.FOLLOW.FOLLOWING_ID }, true);
    public static final UniqueKey<InterestTagRecord> CONSTRAINT_3 = Internal.createUniqueKey(InterestTag.INTEREST_TAG, DSL.name("CONSTRAINT_3"), new TableField[] { InterestTag.INTEREST_TAG.NAME }, true);
    public static final UniqueKey<InterestTagRecord> PK_INTEREST_TAG = Internal.createUniqueKey(InterestTag.INTEREST_TAG, DSL.name("PK_INTEREST_TAG"), new TableField[] { InterestTag.INTEREST_TAG.ID }, true);
    public static final UniqueKey<LoggedInRecord> PK_LOGGED_IN = Internal.createUniqueKey(LoggedIn.LOGGED_IN, DSL.name("PK_LOGGED_IN"), new TableField[] { LoggedIn.LOGGED_IN.ID }, true);
    public static final UniqueKey<OauthidRecord> PK_OAUTHID = Internal.createUniqueKey(Oauthid.OAUTHID, DSL.name("PK_OAUTHID"), new TableField[] { Oauthid.OAUTHID.ID }, true);
    public static final UniqueKey<RoleRecord> PK_ROLE = Internal.createUniqueKey(Role.ROLE, DSL.name("PK_ROLE"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<ScrapRecord> PK_SCRAP = Internal.createUniqueKey(Scrap.SCRAP, DSL.name("PK_SCRAP"), new TableField[] { Scrap.SCRAP.AVATAR_ID, Scrap.SCRAP.ARTICLE_ID }, true);
    public static final UniqueKey<SpamWordRecord> PK_SPAM_WORD = Internal.createUniqueKey(SpamWord.SPAM_WORD, DSL.name("PK_SPAM_WORD"), new TableField[] { SpamWord.SPAM_WORD.ID }, true);
    public static final UniqueKey<TagRecord> PK_TAG = Internal.createUniqueKey(Tag.TAG, DSL.name("PK_TAG"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<TempArticleRecord> PK_TEMP_ARTICLE = Internal.createUniqueKey(TempArticle.TEMP_ARTICLE, DSL.name("PK_TEMP_ARTICLE"), new TableField[] { TempArticle.TEMP_ARTICLE.ID }, true);
    public static final UniqueKey<UserRecord> CONSTRAINT_36 = Internal.createUniqueKey(User.USER, DSL.name("CONSTRAINT_36"), new TableField[] { User.USER.USERNAME }, true);
    public static final UniqueKey<UserRecord> PK_USER = Internal.createUniqueKey(User.USER, DSL.name("PK_USER"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRoleRecord> PK_USER_ROLE = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("PK_USER_ROLE"), new TableField[] { UserRole.USER_ROLE.USER_ID, UserRole.USER_ROLE.ROLE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AvatarInterestTagRecord, AvatarRecord> FK_AVATAR_TO_AVATAR_INTEREST_TAG_1 = Internal.createForeignKey(AvatarInterestTag.AVATAR_INTEREST_TAG, DSL.name("FK_avatar_TO_avatar_interest_tag_1"), new TableField[] { AvatarInterestTag.AVATAR_INTEREST_TAG.AVATAR_ID }, Keys.PK_AVATAR, new TableField[] { Avatar.AVATAR.ID }, true);
    public static final ForeignKey<AvatarInterestTagRecord, InterestTagRecord> FK_TAG_TO_AVATAR_INTEREST_TAG_1 = Internal.createForeignKey(AvatarInterestTag.AVATAR_INTEREST_TAG, DSL.name("FK_tag_TO_avatar_interest_tag_1"), new TableField[] { AvatarInterestTag.AVATAR_INTEREST_TAG.INTEREST_TAG_ID }, Keys.PK_INTEREST_TAG, new TableField[] { InterestTag.INTEREST_TAG.ID }, true);
    public static final ForeignKey<FollowRecord, AvatarRecord> FK_AVATAR_TO_FOLLOW_1 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("FK_avatar_TO_follow_1"), new TableField[] { Follow.FOLLOW.FOLLOWER_ID }, Keys.PK_AVATAR, new TableField[] { Avatar.AVATAR.ID }, true);
    public static final ForeignKey<FollowRecord, AvatarRecord> FK_AVATAR_TO_FOLLOW_2 = Internal.createForeignKey(Follow.FOLLOW, DSL.name("FK_avatar_TO_follow_2"), new TableField[] { Follow.FOLLOW.FOLLOWING_ID }, Keys.PK_AVATAR, new TableField[] { Avatar.AVATAR.ID }, true);
    public static final ForeignKey<ScrapRecord, ArticleRecord> FK_ARTICLE_TO_SCRAP_1 = Internal.createForeignKey(Scrap.SCRAP, DSL.name("FK_article_TO_scrap_1"), new TableField[] { Scrap.SCRAP.ARTICLE_ID }, Keys.PK_ARTICLE, new TableField[] { Article.ARTICLE.ID }, true);
    public static final ForeignKey<ScrapRecord, AvatarRecord> FK_AVATAR_TO_SCRAP_1 = Internal.createForeignKey(Scrap.SCRAP, DSL.name("FK_avatar_TO_scrap_1"), new TableField[] { Scrap.SCRAP.AVATAR_ID }, Keys.PK_AVATAR, new TableField[] { Avatar.AVATAR.ID }, true);
    public static final ForeignKey<UserRoleRecord, RoleRecord> FK_ROLE_TO_USER_ROLE_1 = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("FK_role_TO_user_role_1"), new TableField[] { UserRole.USER_ROLE.ROLE_ID }, Keys.PK_ROLE, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRoleRecord, UserRecord> FK_USER_TO_USER_ROLE_1 = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("FK_user_TO_user_role_1"), new TableField[] { UserRole.USER_ROLE.USER_ID }, Keys.PK_USER, new TableField[] { User.USER.ID }, true);
}
