/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.records.ConfirmEmailRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfirmEmail extends TableImpl<ConfirmEmailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>confirm_email</code>
     */
    public static final ConfirmEmail CONFIRM_EMAIL = new ConfirmEmail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfirmEmailRecord> getRecordType() {
        return ConfirmEmailRecord.class;
    }

    /**
     * The column <code>confirm_email.id</code>.
     */
    public final TableField<ConfirmEmailRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>confirm_email.user_id</code>.
     */
    public final TableField<ConfirmEmailRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>confirm_email.version</code>.
     */
    public final TableField<ConfirmEmailRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>confirm_email.date_expired</code>.
     */
    public final TableField<ConfirmEmailRecord, LocalDateTime> DATE_EXPIRED = createField(DSL.name("date_expired"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>confirm_email.email</code>.
     */
    public final TableField<ConfirmEmailRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>confirm_email.secured_key</code>.
     */
    public final TableField<ConfirmEmailRecord, String> SECURED_KEY = createField(DSL.name("secured_key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ConfirmEmail(Name alias, Table<ConfirmEmailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ConfirmEmail(Name alias, Table<ConfirmEmailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>confirm_email</code> table reference
     */
    public ConfirmEmail(String alias) {
        this(DSL.name(alias), CONFIRM_EMAIL);
    }

    /**
     * Create an aliased <code>confirm_email</code> table reference
     */
    public ConfirmEmail(Name alias) {
        this(alias, CONFIRM_EMAIL);
    }

    /**
     * Create a <code>confirm_email</code> table reference
     */
    public ConfirmEmail() {
        this(DSL.name("confirm_email"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ConfirmEmailRecord> getPrimaryKey() {
        return Keys.PK_CONFIRM_EMAIL;
    }

    @Override
    public ConfirmEmail as(String alias) {
        return new ConfirmEmail(DSL.name(alias), this);
    }

    @Override
    public ConfirmEmail as(Name alias) {
        return new ConfirmEmail(alias, this);
    }

    @Override
    public ConfirmEmail as(Table<?> alias) {
        return new ConfirmEmail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfirmEmail rename(String name) {
        return new ConfirmEmail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfirmEmail rename(Name name) {
        return new ConfirmEmail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfirmEmail rename(Table<?> name) {
        return new ConfirmEmail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail where(Condition condition) {
        return new ConfirmEmail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfirmEmail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfirmEmail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfirmEmail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfirmEmail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfirmEmail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
