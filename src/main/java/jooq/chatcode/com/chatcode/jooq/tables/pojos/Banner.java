/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Banner implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long version;
    private final LocalDateTime dateCreated;
    private final String image;
    private final LocalDateTime lastUpdated;
    private final String name;
    private final String target;
    private final String type;
    private final String url;
    private final Boolean visible;

    public Banner(Banner value) {
        this.id = value.id;
        this.version = value.version;
        this.dateCreated = value.dateCreated;
        this.image = value.image;
        this.lastUpdated = value.lastUpdated;
        this.name = value.name;
        this.target = value.target;
        this.type = value.type;
        this.url = value.url;
        this.visible = value.visible;
    }

    public Banner(
        Long id,
        Long version,
        LocalDateTime dateCreated,
        String image,
        LocalDateTime lastUpdated,
        String name,
        String target,
        String type,
        String url,
        Boolean visible
    ) {
        this.id = id;
        this.version = version;
        this.dateCreated = dateCreated;
        this.image = image;
        this.lastUpdated = lastUpdated;
        this.name = name;
        this.target = target;
        this.type = type;
        this.url = url;
        this.visible = visible;
    }

    /**
     * Getter for <code>banner.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>banner.version</code>.
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>banner.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Getter for <code>banner.image</code>.
     */
    public String getImage() {
        return this.image;
    }

    /**
     * Getter for <code>banner.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Getter for <code>banner.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>banner.target</code>.
     */
    public String getTarget() {
        return this.target;
    }

    /**
     * Getter for <code>banner.type</code>.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Getter for <code>banner.url</code>.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Getter for <code>banner.visible</code>.
     */
    public Boolean getVisible() {
        return this.visible;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Banner other = (Banner) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.dateCreated == null) {
            if (other.dateCreated != null)
                return false;
        }
        else if (!this.dateCreated.equals(other.dateCreated))
            return false;
        if (this.image == null) {
            if (other.image != null)
                return false;
        }
        else if (!this.image.equals(other.image))
            return false;
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!this.lastUpdated.equals(other.lastUpdated))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.target == null) {
            if (other.target != null)
                return false;
        }
        else if (!this.target.equals(other.target))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        }
        else if (!this.url.equals(other.url))
            return false;
        if (this.visible == null) {
            if (other.visible != null)
                return false;
        }
        else if (!this.visible.equals(other.visible))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.dateCreated == null) ? 0 : this.dateCreated.hashCode());
        result = prime * result + ((this.image == null) ? 0 : this.image.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.target == null) ? 0 : this.target.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.visible == null) ? 0 : this.visible.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Banner (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(dateCreated);
        sb.append(", ").append(image);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(name);
        sb.append(", ").append(target);
        sb.append(", ").append(type);
        sb.append(", ").append(url);
        sb.append(", ").append(visible);

        sb.append(")");
        return sb.toString();
    }
}
