/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long avatarId;
    private final Long version;
    private final Boolean accountExpired;
    private final Boolean accountLocked;
    private final String createIp;
    private final LocalDateTime dateCreated;
    private final LocalDateTime dateWithdraw;
    private final LocalDateTime lastPasswordChanged;
    private final String lastUpdateIp;
    private final LocalDateTime lastUpdated;
    private final String password;
    private final Boolean passwordExpired;
    private final String username;
    private final Boolean withdraw;
    private final Integer status;

    public User(User value) {
        this.id = value.id;
        this.avatarId = value.avatarId;
        this.version = value.version;
        this.accountExpired = value.accountExpired;
        this.accountLocked = value.accountLocked;
        this.createIp = value.createIp;
        this.dateCreated = value.dateCreated;
        this.dateWithdraw = value.dateWithdraw;
        this.lastPasswordChanged = value.lastPasswordChanged;
        this.lastUpdateIp = value.lastUpdateIp;
        this.lastUpdated = value.lastUpdated;
        this.password = value.password;
        this.passwordExpired = value.passwordExpired;
        this.username = value.username;
        this.withdraw = value.withdraw;
        this.status = value.status;
    }

    public User(
        Long id,
        Long avatarId,
        Long version,
        Boolean accountExpired,
        Boolean accountLocked,
        String createIp,
        LocalDateTime dateCreated,
        LocalDateTime dateWithdraw,
        LocalDateTime lastPasswordChanged,
        String lastUpdateIp,
        LocalDateTime lastUpdated,
        String password,
        Boolean passwordExpired,
        String username,
        Boolean withdraw,
        Integer status
    ) {
        this.id = id;
        this.avatarId = avatarId;
        this.version = version;
        this.accountExpired = accountExpired;
        this.accountLocked = accountLocked;
        this.createIp = createIp;
        this.dateCreated = dateCreated;
        this.dateWithdraw = dateWithdraw;
        this.lastPasswordChanged = lastPasswordChanged;
        this.lastUpdateIp = lastUpdateIp;
        this.lastUpdated = lastUpdated;
        this.password = password;
        this.passwordExpired = passwordExpired;
        this.username = username;
        this.withdraw = withdraw;
        this.status = status;
    }

    /**
     * Getter for <code>user.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>user.avatar_id</code>.
     */
    public Long getAvatarId() {
        return this.avatarId;
    }

    /**
     * Getter for <code>user.version</code>.
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>user.account_expired</code>.
     */
    public Boolean getAccountExpired() {
        return this.accountExpired;
    }

    /**
     * Getter for <code>user.account_locked</code>.
     */
    public Boolean getAccountLocked() {
        return this.accountLocked;
    }

    /**
     * Getter for <code>user.create_ip</code>.
     */
    public String getCreateIp() {
        return this.createIp;
    }

    /**
     * Getter for <code>user.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Getter for <code>user.date_withdraw</code>.
     */
    public LocalDateTime getDateWithdraw() {
        return this.dateWithdraw;
    }

    /**
     * Getter for <code>user.last_password_changed</code>.
     */
    public LocalDateTime getLastPasswordChanged() {
        return this.lastPasswordChanged;
    }

    /**
     * Getter for <code>user.last_update_ip</code>.
     */
    public String getLastUpdateIp() {
        return this.lastUpdateIp;
    }

    /**
     * Getter for <code>user.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Getter for <code>user.password</code>.
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Getter for <code>user.password_expired</code>.
     */
    public Boolean getPasswordExpired() {
        return this.passwordExpired;
    }

    /**
     * Getter for <code>user.username</code>.
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Getter for <code>user.withdraw</code>.
     */
    public Boolean getWithdraw() {
        return this.withdraw;
    }

    /**
     * Getter for <code>user.status</code>.
     */
    public Integer getStatus() {
        return this.status;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.avatarId == null) {
            if (other.avatarId != null)
                return false;
        }
        else if (!this.avatarId.equals(other.avatarId))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.accountExpired == null) {
            if (other.accountExpired != null)
                return false;
        }
        else if (!this.accountExpired.equals(other.accountExpired))
            return false;
        if (this.accountLocked == null) {
            if (other.accountLocked != null)
                return false;
        }
        else if (!this.accountLocked.equals(other.accountLocked))
            return false;
        if (this.createIp == null) {
            if (other.createIp != null)
                return false;
        }
        else if (!this.createIp.equals(other.createIp))
            return false;
        if (this.dateCreated == null) {
            if (other.dateCreated != null)
                return false;
        }
        else if (!this.dateCreated.equals(other.dateCreated))
            return false;
        if (this.dateWithdraw == null) {
            if (other.dateWithdraw != null)
                return false;
        }
        else if (!this.dateWithdraw.equals(other.dateWithdraw))
            return false;
        if (this.lastPasswordChanged == null) {
            if (other.lastPasswordChanged != null)
                return false;
        }
        else if (!this.lastPasswordChanged.equals(other.lastPasswordChanged))
            return false;
        if (this.lastUpdateIp == null) {
            if (other.lastUpdateIp != null)
                return false;
        }
        else if (!this.lastUpdateIp.equals(other.lastUpdateIp))
            return false;
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!this.lastUpdated.equals(other.lastUpdated))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.passwordExpired == null) {
            if (other.passwordExpired != null)
                return false;
        }
        else if (!this.passwordExpired.equals(other.passwordExpired))
            return false;
        if (this.username == null) {
            if (other.username != null)
                return false;
        }
        else if (!this.username.equals(other.username))
            return false;
        if (this.withdraw == null) {
            if (other.withdraw != null)
                return false;
        }
        else if (!this.withdraw.equals(other.withdraw))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.avatarId == null) ? 0 : this.avatarId.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.accountExpired == null) ? 0 : this.accountExpired.hashCode());
        result = prime * result + ((this.accountLocked == null) ? 0 : this.accountLocked.hashCode());
        result = prime * result + ((this.createIp == null) ? 0 : this.createIp.hashCode());
        result = prime * result + ((this.dateCreated == null) ? 0 : this.dateCreated.hashCode());
        result = prime * result + ((this.dateWithdraw == null) ? 0 : this.dateWithdraw.hashCode());
        result = prime * result + ((this.lastPasswordChanged == null) ? 0 : this.lastPasswordChanged.hashCode());
        result = prime * result + ((this.lastUpdateIp == null) ? 0 : this.lastUpdateIp.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.passwordExpired == null) ? 0 : this.passwordExpired.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.withdraw == null) ? 0 : this.withdraw.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(id);
        sb.append(", ").append(avatarId);
        sb.append(", ").append(version);
        sb.append(", ").append(accountExpired);
        sb.append(", ").append(accountLocked);
        sb.append(", ").append(createIp);
        sb.append(", ").append(dateCreated);
        sb.append(", ").append(dateWithdraw);
        sb.append(", ").append(lastPasswordChanged);
        sb.append(", ").append(lastUpdateIp);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(password);
        sb.append(", ").append(passwordExpired);
        sb.append(", ").append(username);
        sb.append(", ").append(withdraw);
        sb.append(", ").append(status);

        sb.append(")");
        return sb.toString();
    }
}
