/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.records;


import com.chatcode.jooq.tables.Comment;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>comment.id</code>.
     */
    public CommentRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>comment.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>comment.article_id</code>.
     */
    public CommentRecord setArticleId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>comment.article_id</code>.
     */
    public Long getArticleId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>comment.author_id</code>.
     */
    public CommentRecord setAuthorId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>comment.author_id</code>.
     */
    public Long getAuthorId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>comment.version</code>.
     */
    public CommentRecord setVersion(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>comment.version</code>.
     */
    public Long getVersion() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>comment.comment</code>.
     */
    public CommentRecord setComment(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>comment.comment</code>.
     */
    public String getComment() {
        return (String) get(4);
    }

    /**
     * Setter for <code>comment.date_created</code>.
     */
    public CommentRecord setDateCreated(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>comment.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>comment.last_updated</code>.
     */
    public CommentRecord setLastUpdated(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>comment.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>comment.like_count</code>.
     */
    public CommentRecord setLikeCount(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>comment.like_count</code>.
     */
    public Integer getLikeCount() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>comment.dislike_count</code>.
     */
    public CommentRecord setDislikeCount(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>comment.dislike_count</code>.
     */
    public Integer getDislikeCount() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, Long articleId, Long authorId, Long version, String comment, LocalDateTime dateCreated, LocalDateTime lastUpdated, Integer likeCount, Integer dislikeCount) {
        super(Comment.COMMENT);

        setId(id);
        setArticleId(articleId);
        setAuthorId(authorId);
        setVersion(version);
        setComment(comment);
        setDateCreated(dateCreated);
        setLastUpdated(lastUpdated);
        setLikeCount(likeCount);
        setDislikeCount(dislikeCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(com.chatcode.jooq.tables.pojos.Comment value) {
        super(Comment.COMMENT);

        if (value != null) {
            setId(value.getId());
            setArticleId(value.getArticleId());
            setAuthorId(value.getAuthorId());
            setVersion(value.getVersion());
            setComment(value.getComment());
            setDateCreated(value.getDateCreated());
            setLastUpdated(value.getLastUpdated());
            setLikeCount(value.getLikeCount());
            setDislikeCount(value.getDislikeCount());
            resetChangedOnNotNull();
        }
    }
}
