/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.records.ContentRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Content extends TableImpl<ContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>content</code>
     */
    public static final Content CONTENT = new Content();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentRecord> getRecordType() {
        return ContentRecord.class;
    }

    /**
     * The column <code>content.id</code>.
     */
    public final TableField<ContentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>content.version</code>.
     */
    public final TableField<ContentRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>content.article_id</code>.
     */
    public final TableField<ContentRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>content.author_id</code>.
     */
    public final TableField<ContentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>content.create_ip</code>.
     */
    public final TableField<ContentRecord, String> CREATE_IP = createField(DSL.name("create_ip"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>content.date_created</code>.
     */
    public final TableField<ContentRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>content.last_editor_id</code>.
     */
    public final TableField<ContentRecord, Long> LAST_EDITOR_ID = createField(DSL.name("last_editor_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>content.last_updated</code>.
     */
    public final TableField<ContentRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>content.text</code>.
     */
    public final TableField<ContentRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>content.type</code>.
     */
    public final TableField<ContentRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>content.like_count</code>.
     */
    public final TableField<ContentRecord, Integer> LIKE_COUNT = createField(DSL.name("like_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>content.dislike_count</code>.
     */
    public final TableField<ContentRecord, Integer> DISLIKE_COUNT = createField(DSL.name("dislike_count"), SQLDataType.INTEGER.nullable(false), this, "");

    private Content(Name alias, Table<ContentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Content(Name alias, Table<ContentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>content</code> table reference
     */
    public Content(String alias) {
        this(DSL.name(alias), CONTENT);
    }

    /**
     * Create an aliased <code>content</code> table reference
     */
    public Content(Name alias) {
        this(alias, CONTENT);
    }

    /**
     * Create a <code>content</code> table reference
     */
    public Content() {
        this(DSL.name("content"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ContentRecord, Long> getIdentity() {
        return (Identity<ContentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContentRecord> getPrimaryKey() {
        return Keys.PK_CONTENT;
    }

    @Override
    public Content as(String alias) {
        return new Content(DSL.name(alias), this);
    }

    @Override
    public Content as(Name alias) {
        return new Content(alias, this);
    }

    @Override
    public Content as(Table<?> alias) {
        return new Content(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(String name) {
        return new Content(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(Name name) {
        return new Content(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Content rename(Table<?> name) {
        return new Content(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content where(Condition condition) {
        return new Content(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Content where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Content where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Content where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Content where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Content whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
