/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.AvatarInterestTag.AvatarInterestTagPath;
import com.chatcode.jooq.tables.records.InterestTagRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InterestTag extends TableImpl<InterestTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>interest_tag</code>
     */
    public static final InterestTag INTEREST_TAG = new InterestTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InterestTagRecord> getRecordType() {
        return InterestTagRecord.class;
    }

    /**
     * The column <code>interest_tag.id</code>.
     */
    public final TableField<InterestTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>interest_tag.name</code>.
     */
    public final TableField<InterestTagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private InterestTag(Name alias, Table<InterestTagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InterestTag(Name alias, Table<InterestTagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>interest_tag</code> table reference
     */
    public InterestTag(String alias) {
        this(DSL.name(alias), INTEREST_TAG);
    }

    /**
     * Create an aliased <code>interest_tag</code> table reference
     */
    public InterestTag(Name alias) {
        this(alias, INTEREST_TAG);
    }

    /**
     * Create a <code>interest_tag</code> table reference
     */
    public InterestTag() {
        this(DSL.name("interest_tag"), null);
    }

    public <O extends Record> InterestTag(Table<O> path, ForeignKey<O, InterestTagRecord> childPath, InverseForeignKey<O, InterestTagRecord> parentPath) {
        super(path, childPath, parentPath, INTEREST_TAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InterestTagPath extends InterestTag implements Path<InterestTagRecord> {
        public <O extends Record> InterestTagPath(Table<O> path, ForeignKey<O, InterestTagRecord> childPath, InverseForeignKey<O, InterestTagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InterestTagPath(Name alias, Table<InterestTagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InterestTagPath as(String alias) {
            return new InterestTagPath(DSL.name(alias), this);
        }

        @Override
        public InterestTagPath as(Name alias) {
            return new InterestTagPath(alias, this);
        }

        @Override
        public InterestTagPath as(Table<?> alias) {
            return new InterestTagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<InterestTagRecord, Long> getIdentity() {
        return (Identity<InterestTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InterestTagRecord> getPrimaryKey() {
        return Keys.PK_INTEREST_TAG;
    }

    private transient AvatarInterestTagPath _avatarInterestTag;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.avatar_interest_tag</code> table
     */
    public AvatarInterestTagPath avatarInterestTag() {
        if (_avatarInterestTag == null)
            _avatarInterestTag = new AvatarInterestTagPath(this, null, Keys.FK_TAG_TO_AVATAR_INTEREST_TAG_1.getInverseKey());

        return _avatarInterestTag;
    }

    @Override
    public InterestTag as(String alias) {
        return new InterestTag(DSL.name(alias), this);
    }

    @Override
    public InterestTag as(Name alias) {
        return new InterestTag(alias, this);
    }

    @Override
    public InterestTag as(Table<?> alias) {
        return new InterestTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InterestTag rename(String name) {
        return new InterestTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InterestTag rename(Name name) {
        return new InterestTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InterestTag rename(Table<?> name) {
        return new InterestTag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag where(Condition condition) {
        return new InterestTag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InterestTag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InterestTag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InterestTag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InterestTag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InterestTag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
