/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.records.ChangeLogRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChangeLog extends TableImpl<ChangeLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>change_log</code>
     */
    public static final ChangeLog CHANGE_LOG = new ChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangeLogRecord> getRecordType() {
        return ChangeLogRecord.class;
    }

    /**
     * The column <code>change_log.id</code>.
     */
    public final TableField<ChangeLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>change_log.version</code>.
     */
    public final TableField<ChangeLogRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>change_log.article_id</code>.
     */
    public final TableField<ChangeLogRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>change_log.avatar_id</code>.
     */
    public final TableField<ChangeLogRecord, Long> AVATAR_ID = createField(DSL.name("avatar_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>change_log.content_id</code>.
     */
    public final TableField<ChangeLogRecord, Long> CONTENT_ID = createField(DSL.name("content_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>change_log.date_created</code>.
     */
    public final TableField<ChangeLogRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>change_log.md5</code>.
     */
    public final TableField<ChangeLogRecord, String> MD5 = createField(DSL.name("md5"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>change_log.patch</code>.
     */
    public final TableField<ChangeLogRecord, String> PATCH = createField(DSL.name("patch"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>change_log.revision</code>.
     */
    public final TableField<ChangeLogRecord, Integer> REVISION = createField(DSL.name("revision"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>change_log.type</code>.
     */
    public final TableField<ChangeLogRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ChangeLog(Name alias, Table<ChangeLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChangeLog(Name alias, Table<ChangeLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>change_log</code> table reference
     */
    public ChangeLog(String alias) {
        this(DSL.name(alias), CHANGE_LOG);
    }

    /**
     * Create an aliased <code>change_log</code> table reference
     */
    public ChangeLog(Name alias) {
        this(alias, CHANGE_LOG);
    }

    /**
     * Create a <code>change_log</code> table reference
     */
    public ChangeLog() {
        this(DSL.name("change_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ChangeLogRecord> getPrimaryKey() {
        return Keys.PK_CHANGE_LOG;
    }

    @Override
    public ChangeLog as(String alias) {
        return new ChangeLog(DSL.name(alias), this);
    }

    @Override
    public ChangeLog as(Name alias) {
        return new ChangeLog(alias, this);
    }

    @Override
    public ChangeLog as(Table<?> alias) {
        return new ChangeLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeLog rename(String name) {
        return new ChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeLog rename(Name name) {
        return new ChangeLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeLog rename(Table<?> name) {
        return new ChangeLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog where(Condition condition) {
        return new ChangeLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChangeLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChangeLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChangeLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChangeLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChangeLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
