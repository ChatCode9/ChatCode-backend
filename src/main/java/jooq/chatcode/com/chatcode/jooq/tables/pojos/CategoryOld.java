/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryOld implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String code;
    private final Long version;
    private final LocalDateTime dateCreated;
    private final String defaultLabel;
    private final Boolean enabled;
    private final String externalLink;
    private final String iconCssNames;
    private final Boolean isurl;
    private final String labelCode;
    private final LocalDateTime lastUpdated;
    private final Integer level;
    private final String parentId;
    private final Boolean requireTag;
    private final Integer sortOrder;
    private final String url;
    private final Boolean useEvaluate;
    private final Boolean useNote;
    private final Boolean useOpinion;
    private final Boolean useTag;
    private final Boolean writable;
    private final Boolean writeByExternalLink;

    public CategoryOld(CategoryOld value) {
        this.code = value.code;
        this.version = value.version;
        this.dateCreated = value.dateCreated;
        this.defaultLabel = value.defaultLabel;
        this.enabled = value.enabled;
        this.externalLink = value.externalLink;
        this.iconCssNames = value.iconCssNames;
        this.isurl = value.isurl;
        this.labelCode = value.labelCode;
        this.lastUpdated = value.lastUpdated;
        this.level = value.level;
        this.parentId = value.parentId;
        this.requireTag = value.requireTag;
        this.sortOrder = value.sortOrder;
        this.url = value.url;
        this.useEvaluate = value.useEvaluate;
        this.useNote = value.useNote;
        this.useOpinion = value.useOpinion;
        this.useTag = value.useTag;
        this.writable = value.writable;
        this.writeByExternalLink = value.writeByExternalLink;
    }

    public CategoryOld(
        String code,
        Long version,
        LocalDateTime dateCreated,
        String defaultLabel,
        Boolean enabled,
        String externalLink,
        String iconCssNames,
        Boolean isurl,
        String labelCode,
        LocalDateTime lastUpdated,
        Integer level,
        String parentId,
        Boolean requireTag,
        Integer sortOrder,
        String url,
        Boolean useEvaluate,
        Boolean useNote,
        Boolean useOpinion,
        Boolean useTag,
        Boolean writable,
        Boolean writeByExternalLink
    ) {
        this.code = code;
        this.version = version;
        this.dateCreated = dateCreated;
        this.defaultLabel = defaultLabel;
        this.enabled = enabled;
        this.externalLink = externalLink;
        this.iconCssNames = iconCssNames;
        this.isurl = isurl;
        this.labelCode = labelCode;
        this.lastUpdated = lastUpdated;
        this.level = level;
        this.parentId = parentId;
        this.requireTag = requireTag;
        this.sortOrder = sortOrder;
        this.url = url;
        this.useEvaluate = useEvaluate;
        this.useNote = useNote;
        this.useOpinion = useOpinion;
        this.useTag = useTag;
        this.writable = writable;
        this.writeByExternalLink = writeByExternalLink;
    }

    /**
     * Getter for <code>category_old.code</code>.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Getter for <code>category_old.version</code>.
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>category_old.date_created</code>.
     */
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Getter for <code>category_old.default_label</code>.
     */
    public String getDefaultLabel() {
        return this.defaultLabel;
    }

    /**
     * Getter for <code>category_old.enabled</code>.
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Getter for <code>category_old.external_link</code>.
     */
    public String getExternalLink() {
        return this.externalLink;
    }

    /**
     * Getter for <code>category_old.icon_css_names</code>.
     */
    public String getIconCssNames() {
        return this.iconCssNames;
    }

    /**
     * Getter for <code>category_old.isurl</code>.
     */
    public Boolean getIsurl() {
        return this.isurl;
    }

    /**
     * Getter for <code>category_old.label_code</code>.
     */
    public String getLabelCode() {
        return this.labelCode;
    }

    /**
     * Getter for <code>category_old.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Getter for <code>category_old.level</code>.
     */
    public Integer getLevel() {
        return this.level;
    }

    /**
     * Getter for <code>category_old.parent_id</code>.
     */
    public String getParentId() {
        return this.parentId;
    }

    /**
     * Getter for <code>category_old.require_tag</code>.
     */
    public Boolean getRequireTag() {
        return this.requireTag;
    }

    /**
     * Getter for <code>category_old.sort_order</code>.
     */
    public Integer getSortOrder() {
        return this.sortOrder;
    }

    /**
     * Getter for <code>category_old.url</code>.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Getter for <code>category_old.use_evaluate</code>.
     */
    public Boolean getUseEvaluate() {
        return this.useEvaluate;
    }

    /**
     * Getter for <code>category_old.use_note</code>.
     */
    public Boolean getUseNote() {
        return this.useNote;
    }

    /**
     * Getter for <code>category_old.use_opinion</code>.
     */
    public Boolean getUseOpinion() {
        return this.useOpinion;
    }

    /**
     * Getter for <code>category_old.use_tag</code>.
     */
    public Boolean getUseTag() {
        return this.useTag;
    }

    /**
     * Getter for <code>category_old.writable</code>.
     */
    public Boolean getWritable() {
        return this.writable;
    }

    /**
     * Getter for <code>category_old.write_by_external_link</code>.
     */
    public Boolean getWriteByExternalLink() {
        return this.writeByExternalLink;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CategoryOld other = (CategoryOld) obj;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.dateCreated == null) {
            if (other.dateCreated != null)
                return false;
        }
        else if (!this.dateCreated.equals(other.dateCreated))
            return false;
        if (this.defaultLabel == null) {
            if (other.defaultLabel != null)
                return false;
        }
        else if (!this.defaultLabel.equals(other.defaultLabel))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.externalLink == null) {
            if (other.externalLink != null)
                return false;
        }
        else if (!this.externalLink.equals(other.externalLink))
            return false;
        if (this.iconCssNames == null) {
            if (other.iconCssNames != null)
                return false;
        }
        else if (!this.iconCssNames.equals(other.iconCssNames))
            return false;
        if (this.isurl == null) {
            if (other.isurl != null)
                return false;
        }
        else if (!this.isurl.equals(other.isurl))
            return false;
        if (this.labelCode == null) {
            if (other.labelCode != null)
                return false;
        }
        else if (!this.labelCode.equals(other.labelCode))
            return false;
        if (this.lastUpdated == null) {
            if (other.lastUpdated != null)
                return false;
        }
        else if (!this.lastUpdated.equals(other.lastUpdated))
            return false;
        if (this.level == null) {
            if (other.level != null)
                return false;
        }
        else if (!this.level.equals(other.level))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        if (this.requireTag == null) {
            if (other.requireTag != null)
                return false;
        }
        else if (!this.requireTag.equals(other.requireTag))
            return false;
        if (this.sortOrder == null) {
            if (other.sortOrder != null)
                return false;
        }
        else if (!this.sortOrder.equals(other.sortOrder))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        }
        else if (!this.url.equals(other.url))
            return false;
        if (this.useEvaluate == null) {
            if (other.useEvaluate != null)
                return false;
        }
        else if (!this.useEvaluate.equals(other.useEvaluate))
            return false;
        if (this.useNote == null) {
            if (other.useNote != null)
                return false;
        }
        else if (!this.useNote.equals(other.useNote))
            return false;
        if (this.useOpinion == null) {
            if (other.useOpinion != null)
                return false;
        }
        else if (!this.useOpinion.equals(other.useOpinion))
            return false;
        if (this.useTag == null) {
            if (other.useTag != null)
                return false;
        }
        else if (!this.useTag.equals(other.useTag))
            return false;
        if (this.writable == null) {
            if (other.writable != null)
                return false;
        }
        else if (!this.writable.equals(other.writable))
            return false;
        if (this.writeByExternalLink == null) {
            if (other.writeByExternalLink != null)
                return false;
        }
        else if (!this.writeByExternalLink.equals(other.writeByExternalLink))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.dateCreated == null) ? 0 : this.dateCreated.hashCode());
        result = prime * result + ((this.defaultLabel == null) ? 0 : this.defaultLabel.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.externalLink == null) ? 0 : this.externalLink.hashCode());
        result = prime * result + ((this.iconCssNames == null) ? 0 : this.iconCssNames.hashCode());
        result = prime * result + ((this.isurl == null) ? 0 : this.isurl.hashCode());
        result = prime * result + ((this.labelCode == null) ? 0 : this.labelCode.hashCode());
        result = prime * result + ((this.lastUpdated == null) ? 0 : this.lastUpdated.hashCode());
        result = prime * result + ((this.level == null) ? 0 : this.level.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        result = prime * result + ((this.requireTag == null) ? 0 : this.requireTag.hashCode());
        result = prime * result + ((this.sortOrder == null) ? 0 : this.sortOrder.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.useEvaluate == null) ? 0 : this.useEvaluate.hashCode());
        result = prime * result + ((this.useNote == null) ? 0 : this.useNote.hashCode());
        result = prime * result + ((this.useOpinion == null) ? 0 : this.useOpinion.hashCode());
        result = prime * result + ((this.useTag == null) ? 0 : this.useTag.hashCode());
        result = prime * result + ((this.writable == null) ? 0 : this.writable.hashCode());
        result = prime * result + ((this.writeByExternalLink == null) ? 0 : this.writeByExternalLink.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CategoryOld (");

        sb.append(code);
        sb.append(", ").append(version);
        sb.append(", ").append(dateCreated);
        sb.append(", ").append(defaultLabel);
        sb.append(", ").append(enabled);
        sb.append(", ").append(externalLink);
        sb.append(", ").append(iconCssNames);
        sb.append(", ").append(isurl);
        sb.append(", ").append(labelCode);
        sb.append(", ").append(lastUpdated);
        sb.append(", ").append(level);
        sb.append(", ").append(parentId);
        sb.append(", ").append(requireTag);
        sb.append(", ").append(sortOrder);
        sb.append(", ").append(url);
        sb.append(", ").append(useEvaluate);
        sb.append(", ").append(useNote);
        sb.append(", ").append(useOpinion);
        sb.append(", ").append(useTag);
        sb.append(", ").append(writable);
        sb.append(", ").append(writeByExternalLink);

        sb.append(")");
        return sb.toString();
    }
}
