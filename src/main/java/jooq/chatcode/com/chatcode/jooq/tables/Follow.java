/*
 * This file is generated by jOOQ.
 */
package com.chatcode.jooq.tables;


import com.chatcode.jooq.DefaultSchema;
import com.chatcode.jooq.Keys;
import com.chatcode.jooq.tables.Avatar.AvatarPath;
import com.chatcode.jooq.tables.records.FollowRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Follow extends TableImpl<FollowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>follow</code>
     */
    public static final Follow FOLLOW = new Follow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowRecord> getRecordType() {
        return FollowRecord.class;
    }

    /**
     * The column <code>follow.follower_id</code>.
     */
    public final TableField<FollowRecord, Long> FOLLOWER_ID = createField(DSL.name("follower_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>follow.following_id</code>.
     */
    public final TableField<FollowRecord, Long> FOLLOWING_ID = createField(DSL.name("following_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>follow.date_created</code>.
     */
    public final TableField<FollowRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Follow(Name alias, Table<FollowRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Follow(Name alias, Table<FollowRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>follow</code> table reference
     */
    public Follow(String alias) {
        this(DSL.name(alias), FOLLOW);
    }

    /**
     * Create an aliased <code>follow</code> table reference
     */
    public Follow(Name alias) {
        this(alias, FOLLOW);
    }

    /**
     * Create a <code>follow</code> table reference
     */
    public Follow() {
        this(DSL.name("follow"), null);
    }

    public <O extends Record> Follow(Table<O> path, ForeignKey<O, FollowRecord> childPath, InverseForeignKey<O, FollowRecord> parentPath) {
        super(path, childPath, parentPath, FOLLOW);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FollowPath extends Follow implements Path<FollowRecord> {
        public <O extends Record> FollowPath(Table<O> path, ForeignKey<O, FollowRecord> childPath, InverseForeignKey<O, FollowRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FollowPath(Name alias, Table<FollowRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FollowPath as(String alias) {
            return new FollowPath(DSL.name(alias), this);
        }

        @Override
        public FollowPath as(Name alias) {
            return new FollowPath(alias, this);
        }

        @Override
        public FollowPath as(Table<?> alias) {
            return new FollowPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FollowRecord> getPrimaryKey() {
        return Keys.PK_FOLLOW;
    }

    @Override
    public List<ForeignKey<FollowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_AVATAR_TO_FOLLOW_1, Keys.FK_AVATAR_TO_FOLLOW_2);
    }

    private transient AvatarPath _fkAvatarToFollow_1;

    /**
     * Get the implicit join path to the <code>PUBLIC.avatar</code> table, via
     * the <code>FK_avatar_TO_follow_1</code> key.
     */
    public AvatarPath fkAvatarToFollow_1() {
        if (_fkAvatarToFollow_1 == null)
            _fkAvatarToFollow_1 = new AvatarPath(this, Keys.FK_AVATAR_TO_FOLLOW_1, null);

        return _fkAvatarToFollow_1;
    }

    private transient AvatarPath _fkAvatarToFollow_2;

    /**
     * Get the implicit join path to the <code>PUBLIC.avatar</code> table, via
     * the <code>FK_avatar_TO_follow_2</code> key.
     */
    public AvatarPath fkAvatarToFollow_2() {
        if (_fkAvatarToFollow_2 == null)
            _fkAvatarToFollow_2 = new AvatarPath(this, Keys.FK_AVATAR_TO_FOLLOW_2, null);

        return _fkAvatarToFollow_2;
    }

    @Override
    public Follow as(String alias) {
        return new Follow(DSL.name(alias), this);
    }

    @Override
    public Follow as(Name alias) {
        return new Follow(alias, this);
    }

    @Override
    public Follow as(Table<?> alias) {
        return new Follow(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(String name) {
        return new Follow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Name name) {
        return new Follow(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Table<?> name) {
        return new Follow(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow where(Condition condition) {
        return new Follow(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Follow where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Follow where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Follow where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Follow where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Follow whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
